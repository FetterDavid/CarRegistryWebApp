@page "/cars"
@using Model.Models
@using Model.DTOs
@using Client.Services
@inject ICarService CarService;

<PageTitle>Cars</PageTitle>
@if (_cars == null)
{
    <h2>Loading...</h2>
}
else
{
    <div class="form-inline">
        <input type="text" class="mb-2 mr-sm-2" @bind="searchText" placeholder="Search" style="display: inline;" />
        <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Search" style="display: inline;">Filter</button>
        <button type="button" class="btn btn-danger mb-2" @onclick="Clear" style="display: inline;">Clear</button>
    </div>

    <Pagination TotaPagesQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="2" SelectedPage="SelectedPage"></Pagination>

    <h3>Cars</h3>
    <table class="table table-hover table-bordered">
        <thead>
            <tr>
                <td>Brand</td>
                <td>Type</td>
                <td>RegistrationNumber</td>
                <td>Production Date</td>
                <td><a href="car/add/0" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Add New Car</a></td>
            </tr>
        </thead>
        <tbody>
            @foreach (Car car in _cars)
            {
                <tr>
                    <td>@car.Brand</td>
                    <td>@car.Type</td>
                    <td>@car.RegistrationNumber</td>
                    <td>@car.ProductionDate.ToString("yyyy-MM-dd")</td>
                    <td><a href="car/@car.Id" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Details</a></td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private IEnumerable<Car>? _cars { get; set; }
    private int totalPageQuantity;
    private int currentPage = 1;
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadCars(page);
    }

    private async Task LoadCars(int page = 1, int quantityPerPage = 10)
    {
        PaginationResult<Car> res = await CarService.GetAllAsync(searchText, page, quantityPerPage);
        _cars = res.Data;
        totalPageQuantity = res.PageCount;
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadCars();
    }

    private async Task Clear()
    {
        searchText = string.Empty;
        currentPage = 1;
        await LoadCars();
    }
}
